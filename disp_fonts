#!/bin/sh -
#
# Copyright 2000-2012 Robert de Bath
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# SOFTWARE IN THE PUBLIC INTEREST, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
# VT100/ANSI testcard
#
# Version: 1.0 - 2002-10-08 First public release.
#
# Colour:
#   The colour box shows all combinations of FG and BG including defaults
#   the left half is normal the right half is BOLD+Blink too.
#   if the box is red on yellow then CSI [m doesn't touch colours
#   If the 'Def FG' line in the colour box is multiple foregrounds then
#     CSI 39m doesn't work.
#   The attributes section shows each of the 8 attribute numbers with the
#   'off' parts being after a CSI 27m and similar.
#
# Character set box:
#   This is the box at the top to the right of the colour box.
#   The top line includes a test for CSI H.
#   The top three lines display ASCII.
#   The next three display characters 160 to 255; if this is a VT220+
#   then these are set to ISO-8859-1
#   Line 7 is the DEC Special graphics characters.
#   Line 8 displays use of the UK-ASCII set, for a vt220 Non-NRC should
#   be displayed as a hash.
#   Line 9 tests the operation of Background colour erase and SCO CSI=g.
#
# Large characters
#   The bottom line of the testcard is double height/double width.
#   The text is repeated offscreen with the exception that the words
#   'THE END' are underlined on the left and reverse vid on the right.
#   You should not be able to see the less than symbol.

DTERM="$TERM"
[ "$1" != "" ] && DTERM="$1"

UTF=0
case "$DTERM" in
vt10[012]* )    DTERM=vt102 ;;
vt[2345]* )    	DTERM=vt220;;
vt* )		DTERM=vt102 ;;
utf* )		UTF=1;;

xterm )    	DTERM=vt102 ;;
linux* )	DTERM=linux ;;
mstelnet )	DTERM=ms-ansi ;;
msansi )	DTERM=ms-ansi ;;
sco )		DTERM=scoansi ;;

ms-ansi )	;;
ansisys )	;;
scoansi )	;;
scounix )	;;
escu )		;;
none )		;;

ansi* )		DTERM=ansi ;;

* )		DTERM=vt102 ;;
esac

ISOCSET="$2"

main() {
   init_screen
   box_top
   eol_check

   # Normal stuff
   colours
   std_cset

   # On SCO Unix CSI6m Turns off blink other attrs may get set.
   echo -ne '\033[21H\033(B\033)0\033[37;40m\033[m\033[10m'

   # CSI6;0m isn't a NOP on some sco unix versions (undocumented).
   [ "$DTERM" = scounix ] && echo -ne '\033[=1E'

   echo -ne '\033[12;1H'
#  # Check for CSI 39m and CSI 49m
#  echo -ne '\033[44;33m\033[39;49m'
#  echo -ne '\033[K\033[B\033[K\033[B\033[K\033[B\033[K\033[B\033[4A'
#  # Clear colours set by BCE+No CSI49m
#  echo -ne '\033[40;37m\033[m\033[K'

   # Basic sets
   case "$DTERM" in
   vt102 )
       vt_cset ')0' 'DEC Special Graphics'
       vt_cset ')1' 'ROM Character set 1'
       ;;
   vt220 )
       vt_cset ')<' 'User Supplemental'
       vt_cset ')%5' 'DEC Supplemental'
       ;;
   utf|utfb )
       vt_cset ')0' 'DEC Special Graphics'
       if [ "$ISOCSET" != "" ]
       then vt_cset iso
       else vt_cset ')<' 'User Supplemental'
       fi
       ;;
   utf* )
       ;;
   linux|none )
       vt_cset ')0' 'DEC Special Graphics'
       [ "$ISOCSET" != "" ] && vt_cset iso
       ;;
   * )
       vt_cset ')0' 'DEC Special Graphics'
       if [ "$ISOCSET" != "" ]
       then vt_cset iso
       else vt_cset ')<' 'User Supplemental'
       fi
       ;;
   esac

   case "$DTERM" in
   vt102 )
       vt52_mode ')2'  'ROM Character set 2'
       ;;
   vt220 )
       vt52_mode iso
       ;;
   esac


   # vt_cset ')0'  'DEC Special Graphics'
   # vt_cset ')1'  'ROM Character set 1'
   # vt_cset ')2'  'ROM Character set 2'
   # vt_cset ')%5' 'DEC Supplemental'
   # vt_cset '-A'  'ISO-8859-1'
   # vt_cset ')A'  'UK ascii'
   # vt_cset ')B'  'US ascii'
   # vt_cset ')>'  'DEC Technical'
   # vt_cset ')<'  'User Supplemental'


   # 


   [ "$DTERM" = scounix ] 	&& sco_csets
   [ "$DTERM" = scoansi ] 	&& cp437_csets
   [ "$DTERM" = ansi ]		&& csi11m_csets
   [ "$DTERM" = linux ] 	&& linux_csets
   [ "$DTERM" = escu ]   	&& escu_csets
   [ "$DTERM" = ms-ansi ]	&& mstelnet_csets
   [ "$DTERM" = ansisys ]	&& ansisys_csets

   [ "$DTERM" = utf  ]		&& utf_csets
   [ "$DTERM" = utfa ]		&& utf_FX_csets 0xF0 2
   [ "$DTERM" = utfb ]		&& utf_minisel

   [ "$DTERM" = utfd ]		&& utf_FX_csets 0xFD 1
   [ "$DTERM" = utfe ]		&& utf_FX_csets 0xFE 1
   [ "$DTERM" = utff ]		&& utf_FX_csets 0xFF 1
   [ "$DTERM" = utf0 ]		&& utf_FX_csets 0 1
   [ "$DTERM" = utf1 ]		&& utf_FX_csets 2 1
   [ "$DTERM" = utf2 ]		&& utf_FX_csets 0 1
   [ "$DTERM" = utf3 ]		&& utf_FX_csets 2 1

   for i in 16 17 18 19 20
   do echo -ne '\033['$i';71H\033[K'
   done

   case "$DTERM" in
   utf* ) cjk_utf ;;
   esac

   # VT alternates
   vt_tests

   # Finally ...
   big_box

   echo -ne "\033[20;72H$DTERM" # Terminal type

   if [ "$DTERM"  = utfn ]
   then
	i=0
	while [ $i -lt 256 ]
	do
	    utf_FX_csets $i 1
	    echo -ne '\033[24H'
	    i=`expr $i + 1`
	    sleep 2
	done
   fi

   echo -ne '\033[24;1H'
   deinit_screen
   echo -ne '\033[24;1H\033[K'
   echo -e '\033[23;80H'
}

############################################################################
# Clear screen
init_screen() {
echo "#!/bin/cat"
echo "VT100 Klone test for a '$DTERM' terminal"
echo "Generated: `date`"
echo "Modified:  `date -r $0`"
echo "Author: Robert de Bath"
echo
[ "$DTERM" = vt220 ] && echo -ne '\033[62;1"p'	# Soft reset
echo -ne '\033%@'				# DOCS Return.

echo -ne '\033[37;40m\033[10m\033[m\033[39;49m\033[H\033[2J'

# Treating screen as a VT220 only works on a real (old) VT220.
if [ "$DTERM" = vt220 ]
then 
     echo -ne '\033[?42l'			# Not in NRC mode
     echo -ne '\033(B\033)0'			# G0=US Ascii, G1=Special
     echo -ne '\033*B\033+B'			# Reset G2 and G3
     echo -ne '\033*<'				# Put UPSS in G2
     echo -ne '\033+<'				# Put UPSS in G3
     echo -ne '\033.A'				# Put Latin1 in G2
     echo -ne '\017'				# Put G0 in low bits.
     echo -ne '\033|'				# Put G3 in high bits.

     # echo -ne '\033[?42l'			# SCO TERMLITE Frig
else
     echo -ne '\033(B\033)0'			# G0=US Ascii, G1=Special
     echo -ne '\017'				# Put G0 in low bits.
fi

echo -ne '\033[?7h'				# Auto margin on.
}

deinit_screen() {
   if [ "`locale charmap 2>/dev/null`" = "UTF-8" ]
   then echo -ne '\033%G'			# DOCS UTF-8
   else echo -ne '\033%@'			# DOCS RETURN

	if [ "$DTERM" = vt220 ]
	then
	    echo -ne '\033[?42l'                # Not in NRC mode
	    echo -ne '\033(B\033)0'             # G0=US Ascii, G1=Special
	    echo -ne '\033*<'                   # Put UPSS in G2
	    echo -ne '\033+<'                   # Put UPSS in G3
	    echo -ne '\033.A'			# Put Latin1 in G2
	    echo -ne '\033|'			# Put G3 in high bits.
	fi 
   fi
}

box_top() {
############################################################################
# Draw start of Box
case "$DTERM" in
vt* ) echo -ne '\033#8' ;;
* )   echo -ne '\033[3;43HE'
esac

echo -ne '\033[H'
echo -ne '\033[31;43m\033[m\033[K'
echo -ne '+------------------------------------------------------------------------------+\r'
echo -ne '\033(0\rlqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk\033(B'
echo -ne "\033[40;37m\033[m"
echo -ne '\033[2;37H '
echo -ne '\033[3;37H '
echo -ne '\033[2;2H\033[K'

echo -ne '\033[4;1H\033[J* <-- CSI J moves cursor...'
echo -ne '\033[4;1H\033[K'
}

############################################################################
# Check the EOL processing
eol_check() {
echo -ne '\033[11;2H'
echo -ne "  This is not a VT emulator, it's MS Telnet!    \r"
echo -ne '\033[255C \r'
echo -ne '                                                \r'
echo -ne '\033[255C \r\n\033[3A'
echo -ne '                                                \r'
echo -ne "\033[11;2H"
echo -ne "  This is not a VT emulator\r"
echo -ne '\033[255C \r                            \r'
}

############################################################################
# Colours

colours() {
echo -ne '\033[H\n\033(B\r'
echo -ne "\033[m\033[40;37m\033[m"
c=10
for i in 9 7 6 5 4 3 2 1 0
do
   echo -ne "\033[$c;2H"
   c=`expr $c - 1`
   if [ "$i" != 9 ]
   then echo -ne "Attr $i \033[${i}m ON \033[2${i}m OFF \033[m "
   else echo -ne "Def FG           "
   fi
   echo -ne '\033[2;7;0m'

   for j in 9 0 1 2 3 4 5 6 7
   do
      [ $j = 9 ] && echo -ne "\033[4${i}m"
      [ $i = 9 ] && echo -ne "\033[3${j}m"
      echo -ne "\033[3${i};4${j}mA"
   done
   echo -ne "\033[m\033[40;37m"
   for j in 9 0 1 2 3 4 5 6 7
   do
      echo -ne "\033[5;1m"
      [ $j = 9 ] && echo -ne "\033[4${i}m"
      [ $i = 9 ] && echo -ne "\033[3${j}m"
      echo -ne "\033[3${i};4${j}mA"
   done
   echo -ne "\033[m\033[40;37m\033[m"
   echo
done
}

############################################################################
# ISO, VT100 and general ANSI like printables.

std_cset() {
echo -ne '\033[2;38HSingle arg CSI-H is broken'

$AWK -v utf=$UTF 'BEGIN{ 
   printf "\033[21H";
   printf "\033(B"
   if (utf) printf "\033%%@";
   printf "\033)0\017"
   printf "\033[=6K"
   printf "\033[2H";

   for(i=0; i<256; i+=32)
   {
      if (i==0 || i==128) continue;

      printf "\033[37C";
      for(j=0; j<32; j++)
	 if( i+j == 69 )
	    printf "\033[C";
	 else
	 if(i+j >= 32 && i+j < 127)
	    printf "%c", i+j;
	 else if(i+j >= 160 && i+j <= 255)
	    printf "%c", i+j-256;
	 else
	    printf " ";
      printf "\n"
   }

   printf "\033(0"
   printf "\r\033[37C";
   for(j=95; j<127; j++)
   {
      printf "%c", j;
   }
   printf "\r\033(B\n"

   printf "\r\033[37CC-9C=\"\033[41m \033[40m\033[m\"\033[2D%c", 156 - 256;

   printf "\r\033[?42h\033(A\r\033[46CUKP-NRC="
   printf "!#$"
   printf "\r\033[?42l\033(A\r\033[58CNon-NRC="
   printf "!#$"
   printf "\r\033(B\033)0"
   printf "\n"

   printf "\033[36C"
   printf " C+AT="
   printf "\033[31;3;1mO\033[0;31mO\033[4;2mO\033[m"
   printf "\033[32;3;1mO\033[0;32mO\033[4;2mO\033[m"
   printf "\033[34;3;1mO\033[0;34mO\033[4;2mO\033[m"
   printf "\033[37;40m\033[m "
   # printf "\033[37CIf BCE then red:\"\033[41m\033[K\033[40m\033[m\033[49m"
   printf "BCE=\"\033[41m\033[K\033[40m\033[m\033[49m"
   printf "\033[3C\033[K\" ";
   printf "\033[=4K\r\033[62CSCO=No\033[2D\033[=89g\033[=101g\033[=115g\n"

   printf "\033[21H";
}'
}

############################################################################
# vt220 and vt100 real terminals
# Okay ... now we really go for it with the character sets ...
#
# But notice I'm not using any of the VT220 mapping codes so if the high
# bit characters are mapped to G2 or G3 this won't change them.

monitor_mode() {
     # First use 'monitor mode'
     $AWK 'BEGIN{
	bad[0] = "h";
	bad[5] = "";	# These two will still have undesirable effects
	bad[7] = "";
	bad[9] = "b";
	bad[10] = "e";
	bad[11] = "i";
	bad[12] = "c";
	bad[13] = "d";

	printf "\033(B\033)0\016"
        for(i=0; i<32;i++) {
	   printf "\r\033[%dC-\b", i+37
	   if (i in bad)
	       printf("%s", bad[i]);
	   else
	       printf("\033[3h%c\033[3l", i);
	}
	printf "\r\017\r\033[%dC\033[K", 32+37

        printf "\033[12H Monitor mode characters\r\n"
     }'
}

############################################################################
# Some more VT100 emulator stuff

vt_tests() {
$AWK 'BEGIN{ 
   for(i=2; i<=15; i++) {
      printf "\033[%d;70H\033[K", i;
   }
   for(i=0; i<6; i++) {
      if (i==0) {
         printf "\033[21H\033(B"
	 chr = "X";
      }
      if (i==2) {
         printf "\033[21H\033(0"
	 chr = "n";
      }
      if (i==4) {
         printf "\033[21H\033(A"
	 chr = "#";
      }

      printf "\033[%02d;71H", i+2;
      ul = "m";
      if (i % 2 == 1) ul = ";4m";

      str =     "\033[0" ul chr
      str = str "\033[0m\033[5" ul chr
      str = str "\033[0m\033[1" ul chr
      str = str "\033[0m\033[5;1" ul chr
      str = str "\033[0m\033[7" ul chr
      str = str "\033[0m\033[5;7" ul chr
      str = str "\033[0m\033[1;7" ul chr
      str = str "\033[0m\033[1;5m\033[7" ul chr

      printf str
      printf "\033[m"
   }
   printf "\033[21H\033(B\n"

   printf "\033[08;71H\033[44;32;8mConcealed\033[37;40m\033[m";

   # Try very hard to draw boxes ...
   printf "\033[21H\033(0\033)0\016"
   printf "\033[09;74Hlqwwk";
   printf "\033[10;74Hx_tvu";
   printf "\033[11;74Htqnqu";
   printf "\033[12;74Hmqvqj";
   printf "\033[13;71Hopqrs\033[Bopqr";

   printf "\033[21H\033(B\033)0\017"
   # SCO ansi reset.
   printf "\033[21H\033[7;0;7m\033[2;7;0m"

   # Does it eat undefined ansi`s
   printf "\033[15;73H\033[=41!m\033[41!m\033[41 m";
}'

}

############################################################################
# Draw the rest of the big box

big_box() {
echo -ne '\033[21;1H\033(B\033)0'
echo -ne '\033[31;43m\033[m'
for i in 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
do 
   echo -ne "\033[${i};70H\033[1m \033[m"
   echo -ne "\033[${i};1H|\033[78C|\r"
   echo -ne "\033(0\rx\033[78Cx\033(B\n"
done
echo -ne '\033[21;1H+------------------------------------------------------------------------------+\r'
echo -ne '\033(0\rmqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj\033(B\r'

# Repair really bad emulator.
echo -ne '\033[0m\033[37;40m\033[m'
echo -ne '\033[H\033[B'
for i in 0 1 2 3 4 5 6 7  9
do
   if [ "$i" != 9 ]
   then echo -e "\033[CAttr "
   else echo -e "\033[CDef FG "
   fi
done

############################################################################
# The end ...

#echo -ne '\033[22H\033[K'
#echo -e '****************\033[4mTHE END\033[m***************** <-- This should be double size  \033#3\b*'
#echo -e '****************\033[4mTHE END\033[m***************** <-- This should be double size  \033#4\b*'

echo -ne '\033[37;40m'
echo -ne '\033[22H\033[K'
echo -ne '****************\033[4mTHE END\033[m\033[37;40m*****************<***************\033[7mTHE END\033[m\033[37;40m*****************\033#3\b*'
echo -ne '\033[23H\033[K'
echo -ne '\033#4\r****************\033[4mTHE END\033[m\033[37;40m*****************<***************\033[7mTHE END\033[m\033[37;40m*****************\b*'
# echo -ne '\033[22H\033#3\033[23H\033#4'
echo -ne '\033[37;40m\033[m'

# echo -ne '\033[22H\033[K'
# echo -e '****************\033[4mTHE END\033[m*****************<***************\033[7mTHE END\033[m*****************\033#3\b*'
# echo -ne '\033[23H\033[K'
# echo -ne '****************\033[4mTHE END\033[m*****************<***************\033[7mTHE END\033[m*****************\033#4\b*'
# echo -ne '\033[37;40m\033[m'



}

echs_csets() { 
   echo ' XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+---------'
   echo ' XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX|XXXXXXXXX'
   echo ' XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX|XXXXXXXXX'
   echo ' XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+---------'
   echo ' XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX|         '
}

iso_cset()
{
   case "$ISOCSET" in
    *-2 ) vt_cset '-B' 'ISO-8859-2' ;;
    *-3 ) vt_cset '-C' 'ISO-8859-3' ;;
    *-4 ) vt_cset '-D' 'ISO-8859-4' ;;
    *-5 ) vt_cset '-L' 'ISO-8859-5' ;;
    *-6 ) vt_cset '-G' 'ISO-8859-6' ;;
    *-7 ) vt_cset '-F' 'ISO-8859-7' ;;
    *-8 ) vt_cset '-H' 'ISO-8859-8' ;;
    *-9 ) vt_cset '-M' 'ISO-8859-9' ;;
    *-10 ) vt_cset '-V' 'ISO-8859-10' ;;
    *-11 ) vt_cset '-T' 'ISO-8859-11' ;;
    *-13 ) vt_cset '-Y' 'ISO-8859-13' ;;
    *-14 ) vt_cset '-_' 'ISO-8859-14' ;;
    *-15 ) vt_cset '-b' 'ISO-8859-15' ;;
    *-16 ) vt_cset '-f' 'ISO-8859-16' ;;

    *   ) vt_cset '-A' 'ISO-8859-1' ;;
   esac
}

vt_cset() {
     if [ "$1" = "iso" ]
     then iso_cset
     else
	 $AWK -v code="$1" -v name="$2" 'BEGIN{
	    printf "\033[C\033(B\033)B\r\033[C"
	    printf "%s in GL=\047%s\047", name, code
	    printf "\r\033[31C\033%s\016\r\033[37C", code
	    for(i=0; i<32; i++)
	       printf "%c", i+32;
	    printf "\r\n"
	    printf "\033[5C";
	    for(i=0; i<62; i++)
	       printf "%c", i+64;
	    # Char 127 may be a destructive backspace
	    printf "\033[C\177\r\033[67C\176";
	    printf "\r\017\r\n"
	    printf "\033[C\033(B\033)0\r"
	 }'
    fi
}

nrcset() {
     # National replacment
     # Unfortunatly a VT will only have one of these and it's impossible to
     # tell which one without trying each and seeing if the screen is 
     # different. Scheesh!

     $AWK 'BEGIN{
        printf "\033[?42h"

        printf "\033)B"
        printf " NRC British"
	printf "\r\033[32C\033)A\r\033[37C\016#@[\\]^_`{|}~\017\r\n";
 
        printf "\033)B"
        printf " NRC French"
	printf "\r\033[32C\033)R\r\033[37C\016#@[\\]^_`{|}~\017\r\n";

        printf "\033)B"
        printf " NRC German"
	printf "\r\033[32C\033)K\r\033[37C\016#@[\\]^_`{|}~\017\r\n";

        printf "\033)B"
        printf " NRC Swedish"
	printf "\r\033[32C\033)H\r\033[37C\016#@[\\]^_`{|}~\017\r\n";

        printf "\033[?42l"
	printf "\033(B\033)0"
     }'
}

############################################################################
# SCO UNIX Console

sco_csets() {

$AWK 'BEGIN{ 
   lineno=16
   # NB SCO Xenix only has CSI %d g the CSI %d =g is new for Unix and 
   # uses a different attribute set.
   printf "\033[21H\033[?42l"	# SCO TERMLITE frig.
   printf "\033[%d;2HSCO CSI =g font", lineno++
   for(i=0; i<256; i+=16)
   {
      printf "\033[%d;%dH", lineno+i/64, 6+i-int(i/64)*64;
      for(j=0; j<16; j++)
         printf "\033[=%dg", i+j;
      printf "\r\n"
   }
}'
}

############################################################################
# ANSI CP437

cp437_csets() {
$AWK 'BEGIN{ 
   lineno=16
   printf "\033[%d;2HAnsi CSI 10/11/12/13m font", lineno++

   # 0..31  -- flipped
   printf "\033[%d;6H", lineno
   printf "\033[12m\033[13m"
   for(j=0; j<32; j++) {
      if (j == 28) 
	 printf "\033[%d;%dH", lineno, 6 + j
      printf "%c", 128+j;
   }
   printf "\033[10m"

   # 0..31  -- unflipped
   printf "\033[%d;6H", lineno
   printf "\033[11m"
   for(j=0; j<32; j++)
     if (j == 0 || (j>=7 && j<=10) || (j>=12 && j<=15) || j == 27)
        printf "\033[C"
     else
        printf "%c", j;
   printf "\033[10m"

   # 32..63 -- Ascii
   printf "\r\n\033[%d;38H", lineno
   for(j=0; j<32; j++) printf "%c", 32+j;

   # 64..126 -- Ascii
   printf "\033[%d;6H", lineno+1
   for(j=0; j<63; j++) printf "%c", 64+j;

   # 127 -- unflipped
   printf "\033[11m\177\033[10m\r"

   # 128..159 -- Unflipped
   printf "\033[%d;6H", lineno+2
   printf "\033[11m"
   for(j=0; j<32; j++) {
      if (j == 28) 
	 printf "\033[%d;%dH", lineno+2, 6 + j
      printf "%c", 128+j;
   }
   printf "\033[10m"

   # 160..254 -- Flipped.
   # These can also be done unflipped however that conflicts with SCO mapchan.
   printf "\r\n\033[%d;38H\033[12m", lineno+2
   for(j=0; j<32; j++) printf "%c", 32+j;
   printf "\033[%d;6H", lineno+3
   for(j=0; j<63; j++) printf "%c", 64+j;
   printf "\033[10m"

   # 255 -- Flipped.
   printf "\033[12m\177\033[10m\r"
}'
}

############################################################################
# Linux console

linux_csets() {
$AWK 'BEGIN{ 
   lineno=16
   utf[0] = " ";
   utf[7] = "\033%G\342\200\242\033%@";
   utf[8] = "\033%G\342\227\230\033%@"
   utf[10] = "\033%G\342\227\231\033%@"
   utf[12] = "\033%G\342\231\200\033%@"
   utf[13] = "\033%G\342\231\252\033%@"
   utf[14] = "\033%G\342\231\253\033%@"
   utf[15] = "\033%G\342\230\274\033%@"
   utf[27] = "\033%G\342\206\220\033%@"
   utf[155] = "\033%G\302\242\033%@"

   printf "\033[%d;2HLinux CSI 11m + utf font", lineno++
   for(i=0; i<256; i+=64)
   {
      for(j=0; j<64; j++)
      {
	 ch = i+j;
         if( ch in utf ) {
            printf "\033[%d;%dH", lineno+i/64, 6+j;
            printf "%s", utf[i+j];
	 }
      }
   }
   for(i=0; i<256; i+=64)
   {
      printf "\033[%d;6H", lineno+i/64;
      printf "\033[11m"
      for(j=0; j<64; j++)
      {
	 ch = i+j;
         if( ch in utf )
            printf "\033[C";
	 else
            printf "%c", (i+j) ;
      }
      printf "\033[10m\r\n"
   }
}'

# ... for terminfo
# dispc=%?%p2%{8}%=%t\033%%G\342\227\230\033%%@%e%p2%{10}%=%t\033%%G\342\227\231\033%%@%e%p2%{12}%=%t\033%%G\342\231\200\033%%@%e%p2%{13}%=%t\033%%G\342\231\252\033%%@%e%p2%{14}%=%t\033%%G\342\231\253\033%%@%e%p2%{15}%=%t\033%%G\342\230\274\033%%@%e%p2%{27}%=%t\033%%G\342\206\220\033%%@%e%p2%{155}%=%t\033%%G\340\202\242\033%%@%e%p2%c%;,

}

csi11m_csets() {
$AWK 'BEGIN{ 
   lineno=16
   bc = "\033[2m\033[37;40m.\033[m";
   # utf[0] = bc;
   # utf[7] = bc;
   # utf[8] = bc;
   # utf[10] = bc;
   # utf[12] = bc;
   # utf[13] = bc;
   # utf[14] = bc;
   # utf[15] = bc;
   utf[27] = bc;
   # utf[155] = bc;

   printf "\033[%d;2HLinux CSI 11m only font", lineno++
   for(i=0; i<256; i+=64)
   {
      for(j=0; j<64; j++)
      {
	 ch = i+j;
         if( ch in utf ) {
            printf "\033[%d;%dH", lineno+i/64, 6+j;
            printf "%s", utf[i+j];
	 }
      }
   }
   printf "\033[37;40m\033[m";

   for(i=0; i<256; i+=64)
   {
      printf "\033[%d;6H", lineno+i/64;
      printf "\033[11m"
      for(j=0; j<64; j++)
      {
	 ch = i+j;
	 if (ch < 33 || (ch >= 126 || ch < 161) ) {
            printf "\033[%d;%dH%s", lineno+i/64, j+6, bc
            printf "\033[%d;%dH", lineno+i/64, j+6
	 }

         if( ch in utf )
            printf "\033[C";
	 else
            printf "%c", (i+j) ;
	 if (ch < 32 || (ch >= 126 || ch < 160) ) {
            printf " "
	 }
      }
      printf "\033[10m\r\n"
   }
}'

# ... for terminfo
# dispc=%?%p2%{8}%=%t\033%%G\342\227\230\033%%@%e%p2%{10}%=%t\033%%G\342\227\231\033%%@%e%p2%{12}%=%t\033%%G\342\231\200\033%%@%e%p2%{13}%=%t\033%%G\342\231\252\033%%@%e%p2%{14}%=%t\033%%G\342\231\253\033%%@%e%p2%{15}%=%t\033%%G\342\230\274\033%%@%e%p2%{27}%=%t\033%%G\342\206\220\033%%@%e%p2%{155}%=%t\033%%G\340\202\242\033%%@%e%p2%c%;,

}

############################################################################
# Linux CP437 for screen or other 8-bit VT100's

escu_csets() {
$AWK 'BEGIN{ 
   lineno=16
   printf "\033[%d;2HLinux ESC ( U font", lineno++
   for(i=32; i<256; i+=32)
   {
      printf "\033[%d;%dH", lineno+i/64, 6+i%64;
      printf "\033(U"
      for(j=0; j<32; j++)
         if (i+j == 127)
	    printf " " ;
	 else
	    printf "%c", (i+j) ;
      printf "\033(B\r\n"
   }
}'

}

############################################################################
# Microsoft telnet.

mstelnet_csets() {
$AWK 'BEGIN{ 
   lineno=16
   bch = "\033[5;7m*\033[m\033[D";  # Highlight non-literal

   _bad[0] = "*"; bad[7] = "*"; _bad[8] = "*"; _bad[9] = "*"; _bad[10] = "*";
   _bad[13] = "*"; _bad[14] = "*"; _bad[15] = "*"; bad[27] = "*";

   # Win2k unprintables.
   bad[5] = "*"; _bad[11] = "*"; bad[12] = "*"; bad[17] = "*"; bad[19] = "*";

   printf "\033[%d;4HPrintable characters in MSTelnet", lineno++
   for(i=0; i<256; i+=64)
   {
      printf "\033[%d;6H", lineno+i/64;
      for(j=0; j<64; j++)
      {
	 ch = i+j;
         printf "\033[%d;%dH%s", lineno+i/64, j+6, bch
         if( ch in bad )
            printf "%s", bad[ch];
	 else
            printf "%c", ch;
         if (ch == 127)
	    printf "\033[%d;%dH%c", lineno+i/64, j+6-1, ch-1
      }
      printf "\r\n"
   }
}'

}

############################################################################
# 

ansisys_csets() {
$AWK 'BEGIN{
   lineno=16
   bch = "\033[5;7m*\033[m\033[D";  # Highlight non-literal
   bad[27] = "\033[\033";       # Special for ESC

   printf "\033[%d;4HPrintable characters in ANSI.SYS", lineno++
   for(i=0; i<256; i+=64)
   {
      printf "\033[%d;6H", lineno+i/64;
      for(j=0; j<64; j++)
      {
	 ch = i+j;
         printf "\033[%d;%dH%s", lineno+i/64, j+6, bch
         if( ch in bad )
            printf "%s", bad[ch];
	 else
            printf "%c", ch;
      }
      printf "\r\n"
   }

# copy /b w:\vt.txt con: >nul:

}'

}

############################################################################
# 

utf_FX_csets() {
mawk -v offset=$1 -v flg=$2 'BEGIN{ 
   lineno=16
   if (flg) lineno = lineno - 4;
   cl=64;
   cs=1;
   nchars=256
   if (flg == 1) {cl=32; cs=2;}
   if (flg == 2) {nchars = 512;}

   printf "\033[%d;2HCharacters from U+%04X", lineno++, 256*offset
   printf " \033%%G";
   for(i=0; i<nchars; i+=cl)
   {
      printf "\033[%d;4H\033[1m  \033[m", lineno+i/cl;
      for(j=0; j<cl; j++)
      {
	 if (j%2 == 0 || cs>1)
	   printf "\033[%d;%dH\033[2m- \033[m\033[2D",
		  lineno+i/cl, 6 + j*cs;

	 uc = i+j + offset * 256;
         if (uc < 127 && uc >= 32)
            printf "%c", uc;
         else if (uc != "")
         {
            c2 = int(uc/64);
            c1 = uc - c2*64;
            c3 = int(c2/64);
            c2 = c2 - c3 * 64;
            if (uc < 2048)
		    printf "%c%c", c2+192, c1+128;
            else    printf "%c%c%c", c3+224, c2+128, c1+128;
         }
      }

      printf "\033[%d;%dH\033[1m  \033[m", lineno+i/cl, 6+64;

   }
      printf "\033[%d;2H", lineno+nchars/cl;
      printf "\033%%@"
}'
}

############################################################################
# 

utf_csets() {

echo -e '\033[17;45H**\033[2D\033[1K'
echo -e '\033[19;45H**\033[2D\033[1K'

mmencode -u -q <<\!
=1B[16;2HCompact UTF-8 font selection example text. =
=CE=A0=08=08=20=1B[C=1B%G
=1B[4C ABCDEFGHIJKLMNOPQRSTUVWXYZ /0123456789
=1B[4C abcdefghijklmnopqrstuvwxyz =C2=A3=C2=A9=C2=B5=C3=80=C3=86=C3=96=C3=
=9E=C3=9F=C3=A9=C3=B6=C3=BF
=1B[4C =E2=80=93=E2=80=94=E2=80=98=E2=80=9C=E2=80=9D=E2=80=9E=E2=80=A0=E2=
=80=A2=E2=80=A6=E2=80=B0=E2=84=A2=C5=93=C5=A0=C5=B8=C5=BE=E2=82=AC =CE=91=
=CE=92=CE=93=CE=94=CE=A9=CE=B1=CE=B2=CE=B3=CE=B4=CF=89 =D0=90=D0=91=D0=92=
=D0=93=D0=94=D0=B0=D0=B1=D0=B2=D0=B3=D0=B4
=1B[4C =E2=88=80=E2=88=82=E2=88=88=E2=84=9D=E2=88=A7=E2=88=AA=E2=89=A1=E2=
=88=9E =E2=86=91=E2=86=97=E2=86=A8=E2=86=BB=E2=87=A3 =E2=94=90=E2=94=BC=E2=
=95=94=E2=95=98=E2=96=91=E2=96=BA=E2=98=BA=E2=99=80 =EF=AC=81=EF=BF=BD=E2=
=91=80=E2=82=82=E1=BC=A0=E1=B8=82=D3=A5=E1=BA=84=C9=90=CB=90=E2=8D=8E=D7=90=
=D4=B1=E1=83=90
=1B%@
!

echo -e '\033[17;5H\033[1K\033[17;46H\033[2m*\033[m\033[K'
echo -e '\033[18;5H\033[1K\033[18;46H\033[2m*\033[m\033[K'
echo -e '\033[19;5H\033[1K\033[19;46H\033[2m*\033[m\033[K'
echo -e '\033[20;5H\033[1K\033[20;46H\033[2m*\033[m\033[K'

echo -ne "\033[17;48H\x1b%G"
echo -ne "\033[17;48HMore UTF8 "
echo -ne 's\xcc\xb6t\xcc\xb6u\xcc\xb6f\xcc\xb6f\xcc\xb6 text'

mmencode -u -q <<\!
=1B[18;49H =1B%G
=1B[18;49H  =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=90
=1B[19;49H  =E2=94=82 =C2=A3=C2=A9=C2=B5=C3=80=C3=86=C3=96=C3=
=9E=C3=9F=C3=A9=C3=B6=C3=BF =E2=94=82
=1B[20;49H  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=98
=1B%@
!

:  $AWK 'BEGIN{ 
      lineno = 16;
      printf "\033[%d;48HCSI 11/12m", lineno++
      printf "\033[12m"
      printf "\033[%d;48H", lineno++
      for(j=0; j<14; j++) printf "%c", 128+j;
      for(j=23; j<32; j++) if(j!=26) printf "%c", 128+j;
      printf "\033[10m\r\n"
      printf "\033[12m"
      printf "\033[%d;48H", lineno++
      for(j=0; j<14; j++) printf "%c", 224+j;
      for(j=23; j<32; j++) if(j!=26) printf "%c", 224+j;
      printf "\033[10m\r\n"
      printf "\033[11m"
      printf "\033[%d;48H", lineno++
      for(j=0; j<14; j++) printf "%c", 128+j;
      for(j=23; j<32; j++) if(j!=26) printf "%c", 128+j;
      printf "\033[10m\r\n"
      printf "\033[11m"
      printf "\033[%d;48H", lineno++
      for(j=0; j<14; j++) printf "%c", 192+j;
      for(j=23; j<32; j++) if(j!=26) printf "%c", 192+j;
      printf "\033[10m\r\n"
   }'
}

utf_minisel() {
  vt52_mode

mmencode -u -q <<\!
=1B[18;31H =1B%G
=1B[4C =E2=80=93=E2=80=94=E2=80=98=E2=80=9C=E2=80=9D=E2=80=9E=E2=80=A0=E2=
=80=A2=E2=80=A6=E2=80=B0=E2=84=A2=C5=93=C5=A0=C5=B8=C5=BE=E2=82=AC =CE=91=
=CE=92=CE=93=CE=94=CE=A9=CE=B1=CE=B2=CE=B3=CE=B4=CF=89 =D0=90=D0=91=D0=92=
=D0=93=D0=94=D0=B0=D0=B1=D0=B2=D0=B3=D0=B4
=1B[4C =E2=88=80=E2=88=82=E2=88=88=E2=84=9D=E2=88=A7=E2=88=AA=E2=89=A1=E2=
=88=9E =E2=86=91=E2=86=97=E2=86=A8=E2=86=BB=E2=87=A3 =E2=94=90=E2=94=BC=E2=
=95=94=E2=95=98=E2=96=91=E2=96=BA=E2=98=BA=E2=99=80 =EF=AC=81=EF=BF=BD=E2=
=91=80=E2=82=82=E1=BC=A0=E1=B8=82=D3=A5=E1=BA=84=C9=90=CB=90=E2=8D=8E=D7=90=
=D4=B1=E1=83=90
=1B%@
!

echo -e                  '\033[18;46H *\033[K'
echo -e '\033[19;5H\033[1K\033[19;46H *\033[K'
echo -e '\033[20;5H\033[1K\033[20;46H *\033[K'

mmencode -u -q <<\!
=1B[18;49H =1B%G =E2=94=8C=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=90
=1B[19;49H  =E2=94=82 =C2=A3=C2=A9=C2=B5=C3=80=C3=86=C3=96=C3=
=9E=C3=9F=C3=A9=C3=B6=C3=BF =E2=94=82
=1B[20;49H  =E2=94=94=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=E2=94=80=
=E2=94=98
=1B%@
!

echo -e                  '\033[18;68H *\033[K'
echo -e '\033[19;5H\033[1K\033[19;68H *\033[K'
echo -e '\033[20;5H\033[1K\033[20;68H *\033[K'
}

cjk_utf() {
#  echo -ne "\033[24;1H\033%G"
#  /bin/echo -ne "\033[17;72H \344\270\255\346\226\207"
#  /bin/echo -ne "\033[18;72H\346\227\245\346\234\254\350\252\236"
#  /bin/echo -ne "\033[19;72H\355\225\234\352\265\255\354\226\264"
#  echo -ne "\033[24;1H\033%@"

    echo -ne '\x1b[17;73H**'
    echo -ne '\x1b[18;72H***'
    echo -ne '\x1b[19;72H***'

    echo -ne '\x1b[24;1H\x1b%G'
    echo -ne '\x1b[17;73H\xe4\xb8\xad'
    echo -ne '\x1b[17;75H\xe6\x96\x87'

    echo -ne '\x1b[18;72H\xe6\x97\xa5'
    echo -ne '\x1b[18;74H\xe6\x9c\xac'
    echo -ne            '\xe8\xaa\x9e'

    echo -ne '\x1b[19;72H\xed\x95\x9c'
    echo -ne '\x1b[19;74H\xea\xb5\xad'
    echo -ne            '\xec\x96\xb4'

    echo -ne '\x1b[24;1H\x1b%@'
}

vt52_mode() { 
  LN=16

  [ "$1" != "" ] && {
     vt_cset "$1" "$2"
     LN=18
  }

  $AWK -v lineno=$LN 'BEGIN{
   vt52 = "\033[?2l\033F";
   vt100 = "\033G\033<"; 
   printf "\033[%d;2HVT52 Alternate character set", lineno
   for(i=0; i<128; i+=64)
   {
      printf "\033[%d;6H%s", lineno+i/64, vt52
      for(j=0; j<64; j++)
      {
         if (j==32) 
	    printf "\r\n %s\033[%d;38H%s", vt100, lineno+i/64, vt52

	 ch = i+j;
         if( ch < 32 || (ch >= 127 && ch < 160) || ch == 255 )
            ;
	 else
            printf "%c", ch;
      }
      printf "%s\r\n", vt100
   }
}'

  # The colon is needed to kill rxvt graphics.
  echo -ne ':\r VT52 Mode is not working!'
  echo -e  '\r\033[?2l\033K'
  # echo -ne ' VT52 \033b1E\033b2x\033b3t\033b4e\033b5n\033b6s\033b7i\033b8o\033b9n\033b:s\033b7!\033A\033M'
  echo -ne ' VT52 Mode working fine!   \033A\033M'
  echo -e  ' \033<'
  [ "$DTERM" = vt220 ] &&
    echo -ne '\033[62;1"p'  # Get back into real VT220 not VT100 emulation.
  echo -e  ':\033\\\r\033[K'
  return 0
}

[ "`echo -ne '\061'`" != '1' ] && {
  echo() {
    /bin/echo "$@"
  }
}

[ "$AWK" = "" -a -x /usr/bin/mawk ] && AWK=/usr/bin/mawk
[ "$AWK" = "" ] && AWK=awk

if [ "$1" = utfn ]
then main "$@"
else
    main "$@" > /tmp/disp_$$
    cat /tmp/disp_$$
    rm /tmp/disp_$$
    exit 0
fi
